#!/bin/bash\n\n# AI Productivity Suite Deployment Script\n# This script automates the deployment process for production\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nPROJECT_NAME=\"ai-productivity-suite\"\nGIT_REPO=\"https://github.com/1234-ad/ai-productivity-suite.git\"\nDEPLOY_DIR=\"/opt/ai-suite\"\nBACKUP_DIR=\"/opt/backups/ai-suite\"\nLOG_FILE=\"/var/log/ai-suite-deploy.log\"\n\n# Functions\nlog() {\n    echo -e \"${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1\" | tee -a $LOG_FILE\n}\n\nerror() {\n    echo -e \"${RED}[ERROR]${NC} $1\" | tee -a $LOG_FILE\n    exit 1\n}\n\nsuccess() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\" | tee -a $LOG_FILE\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\" | tee -a $LOG_FILE\n}\n\n# Check if running as root\nif [[ $EUID -eq 0 ]]; then\n   error \"This script should not be run as root for security reasons\"\nfi\n\n# Check prerequisites\ncheck_prerequisites() {\n    log \"Checking prerequisites...\"\n    \n    # Check if Docker is installed\n    if ! command -v docker &> /dev/null; then\n        error \"Docker is not installed. Please install Docker first.\"\n    fi\n    \n    # Check if Docker Compose is installed\n    if ! command -v docker-compose &> /dev/null; then\n        error \"Docker Compose is not installed. Please install Docker Compose first.\"\n    fi\n    \n    # Check if Git is installed\n    if ! command -v git &> /dev/null; then\n        error \"Git is not installed. Please install Git first.\"\n    fi\n    \n    # Check if Node.js is installed\n    if ! command -v node &> /dev/null; then\n        error \"Node.js is not installed. Please install Node.js first.\"\n    fi\n    \n    success \"All prerequisites are met\"\n}\n\n# Create backup\ncreate_backup() {\n    if [ -d \"$DEPLOY_DIR\" ]; then\n        log \"Creating backup...\"\n        mkdir -p $BACKUP_DIR\n        BACKUP_NAME=\"backup-$(date +%Y%m%d-%H%M%S)\"\n        cp -r $DEPLOY_DIR $BACKUP_DIR/$BACKUP_NAME\n        success \"Backup created: $BACKUP_DIR/$BACKUP_NAME\"\n    fi\n}\n\n# Clone or update repository\nsetup_repository() {\n    log \"Setting up repository...\"\n    \n    if [ -d \"$DEPLOY_DIR\" ]; then\n        log \"Updating existing repository...\"\n        cd $DEPLOY_DIR\n        git fetch origin\n        git reset --hard origin/main\n    else\n        log \"Cloning repository...\"\n        sudo mkdir -p $DEPLOY_DIR\n        sudo chown $USER:$USER $DEPLOY_DIR\n        git clone $GIT_REPO $DEPLOY_DIR\n        cd $DEPLOY_DIR\n    fi\n    \n    success \"Repository setup complete\"\n}\n\n# Setup environment\nsetup_environment() {\n    log \"Setting up environment...\"\n    \n    if [ ! -f \".env\" ]; then\n        if [ -f \".env.example\" ]; then\n            cp .env.example .env\n            warning \"Environment file created from template. Please update .env with your actual values.\"\n        else\n            error \"No .env.example file found. Please create environment configuration.\"\n        fi\n    fi\n    \n    success \"Environment setup complete\"\n}\n\n# Install dependencies\ninstall_dependencies() {\n    log \"Installing dependencies...\"\n    \n    # Install root dependencies\n    npm install\n    \n    # Install client dependencies\n    cd client\n    npm install\n    cd ..\n    \n    # Install server dependencies\n    cd server\n    npm install\n    cd ..\n    \n    success \"Dependencies installed\"\n}\n\n# Build application\nbuild_application() {\n    log \"Building application...\"\n    \n    # Build client\n    cd client\n    npm run build\n    cd ..\n    \n    # Build server\n    cd server\n    npm run build\n    cd ..\n    \n    success \"Application built successfully\"\n}\n\n# Setup database\nsetup_database() {\n    log \"Setting up database...\"\n    \n    # Start database services\n    docker-compose up -d postgres redis\n    \n    # Wait for database to be ready\n    sleep 10\n    \n    # Run migrations\n    cd server\n    npx prisma migrate deploy\n    npx prisma generate\n    cd ..\n    \n    success \"Database setup complete\"\n}\n\n# Deploy with Docker\ndeploy_docker() {\n    log \"Deploying with Docker...\"\n    \n    # Stop existing containers\n    docker-compose down\n    \n    # Build and start containers\n    docker-compose up -d --build\n    \n    # Wait for services to be ready\n    sleep 30\n    \n    success \"Docker deployment complete\"\n}\n\n# Health check\nhealth_check() {\n    log \"Performing health check...\"\n    \n    # Check API health\n    for i in {1..10}; do\n        if curl -f http://localhost:8000/health > /dev/null 2>&1; then\n            success \"API is healthy\"\n            break\n        else\n            if [ $i -eq 10 ]; then\n                error \"API health check failed after 10 attempts\"\n            fi\n            log \"Waiting for API to be ready... (attempt $i/10)\"\n            sleep 10\n        fi\n    done\n    \n    # Check client\n    for i in {1..10}; do\n        if curl -f http://localhost:3000 > /dev/null 2>&1; then\n            success \"Client is healthy\"\n            break\n        else\n            if [ $i -eq 10 ]; then\n                error \"Client health check failed after 10 attempts\"\n            fi\n            log \"Waiting for client to be ready... (attempt $i/10)\"\n            sleep 10\n        fi\n    done\n    \n    success \"All services are healthy\"\n}\n\n# Setup monitoring\nsetup_monitoring() {\n    log \"Setting up monitoring...\"\n    \n    # Start monitoring services\n    docker-compose up -d prometheus grafana\n    \n    success \"Monitoring setup complete\"\n    log \"Grafana dashboard: http://localhost:3001 (admin/admin123)\"\n    log \"Prometheus: http://localhost:9090\"\n}\n\n# Setup SSL (optional)\nsetup_ssl() {\n    if [ \"$1\" = \"--ssl\" ]; then\n        log \"Setting up SSL...\"\n        \n        # Install certbot if not present\n        if ! command -v certbot &> /dev/null; then\n            sudo apt-get update\n            sudo apt-get install -y certbot python3-certbot-nginx\n        fi\n        \n        # Generate SSL certificate\n        read -p \"Enter your domain name: \" DOMAIN\n        sudo certbot --nginx -d $DOMAIN\n        \n        success \"SSL setup complete\"\n    fi\n}\n\n# Cleanup old resources\ncleanup() {\n    log \"Cleaning up...\"\n    \n    # Remove old Docker images\n    docker image prune -f\n    \n    # Remove old backups (keep last 5)\n    if [ -d \"$BACKUP_DIR\" ]; then\n        cd $BACKUP_DIR\n        ls -t | tail -n +6 | xargs -r rm -rf\n    fi\n    \n    success \"Cleanup complete\"\n}\n\n# Main deployment function\nmain() {\n    log \"Starting AI Productivity Suite deployment...\"\n    \n    check_prerequisites\n    create_backup\n    setup_repository\n    setup_environment\n    install_dependencies\n    build_application\n    setup_database\n    deploy_docker\n    health_check\n    setup_monitoring\n    setup_ssl $1\n    cleanup\n    \n    success \"ðŸš€ Deployment completed successfully!\"\n    log \"Application URLs:\"\n    log \"  - Frontend: http://localhost:3000\"\n    log \"  - API: http://localhost:8000\"\n    log \"  - API Docs: http://localhost:8000/api\"\n    log \"  - Health Check: http://localhost:8000/health\"\n    log \"  - Grafana: http://localhost:3001\"\n    log \"  - Prometheus: http://localhost:9090\"\n}\n\n# Script usage\nusage() {\n    echo \"Usage: $0 [OPTIONS]\"\n    echo \"Options:\"\n    echo \"  --ssl     Setup SSL certificate with Let's Encrypt\"\n    echo \"  --help    Show this help message\"\n}\n\n# Parse command line arguments\ncase \"$1\" in\n    --help)\n        usage\n        exit 0\n        ;;\n    --ssl)\n        main --ssl\n        ;;\n    \"\")\n        main\n        ;;\n    *)\n        error \"Unknown option: $1\"\n        usage\n        exit 1\n        ;;\nesac"