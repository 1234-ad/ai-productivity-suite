version: '3.8'\n\nservices:\n  # PostgreSQL Database\n  postgres:\n    image: postgres:15-alpine\n    container_name: ai-suite-postgres\n    environment:\n      POSTGRES_DB: ai_productivity_suite\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres123\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n\n  # Redis Cache\n  redis:\n    image: redis:7-alpine\n    container_name: ai-suite-redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n    command: redis-server --appendonly yes\n\n  # Backend API\n  api:\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    container_name: ai-suite-api\n    environment:\n      NODE_ENV: production\n      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/ai_productivity_suite\n      REDIS_URL: redis://redis:6379\n      JWT_SECRET: your-super-secret-jwt-key-change-in-production\n      OPENAI_API_KEY: ${OPENAI_API_KEY}\n      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN}\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}\n      S3_BUCKET_NAME: ${S3_BUCKET_NAME}\n      CLIENT_URL: http://localhost:3000\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n    volumes:\n      - ./server/uploads:/app/uploads\n\n  # Frontend Client\n  client:\n    build:\n      context: ./client\n      dockerfile: Dockerfile\n    container_name: ai-suite-client\n    environment:\n      NEXT_PUBLIC_API_URL: http://localhost:8000/api\n      NEXTAUTH_URL: http://localhost:3000\n      NEXTAUTH_SECRET: your-nextauth-secret-change-in-production\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - api\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n\n  # Nginx Reverse Proxy\n  nginx:\n    image: nginx:alpine\n    container_name: ai-suite-nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n    depends_on:\n      - client\n      - api\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n\n  # Monitoring with Prometheus\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: ai-suite-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n\n  # Grafana Dashboard\n  grafana:\n    image: grafana/grafana:latest\n    container_name: ai-suite-grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: admin123\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards\n      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources\n    networks:\n      - ai-suite-network\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  ai-suite-network:\n    driver: bridge"