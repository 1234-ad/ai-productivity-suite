import express from 'express'\nimport cors from 'cors'\nimport helmet from 'helmet'\nimport morgan from 'morgan'\nimport compression from 'compression'\nimport rateLimit from 'express-rate-limit'\nimport { createServer } from 'http'\nimport { Server } from 'socket.io'\nimport dotenv from 'dotenv'\nimport { PrismaClient } from '@prisma/client'\nimport Redis from 'ioredis'\n\n// Import routes\nimport authRoutes from './routes/auth'\nimport aiRoutes from './routes/ai'\nimport userRoutes from './routes/user'\nimport documentRoutes from './routes/document'\nimport analyticsRoutes from './routes/analytics'\n\n// Import middleware\nimport { errorHandler } from './middleware/errorHandler'\nimport { authMiddleware } from './middleware/auth'\nimport { logger } from './utils/logger'\n\n// Load environment variables\ndotenv.config()\n\n// Initialize database and cache\nconst prisma = new PrismaClient()\nconst redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379')\n\n// Create Express app\nconst app = express()\nconst server = createServer(app)\nconst io = new Server(server, {\n  cors: {\n    origin: process.env.CLIENT_URL || 'http://localhost:3000',\n    methods: ['GET', 'POST']\n  }\n})\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", 'data:', 'https:'],\n    },\n  },\n}))\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.CLIENT_URL || 'http://localhost:3000',\n  credentials: true\n}))\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false,\n})\napp.use(limiter)\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }))\napp.use(express.urlencoded({ extended: true, limit: '10mb' }))\n\n// Compression middleware\napp.use(compression())\n\n// Logging middleware\napp.use(morgan('combined', {\n  stream: {\n    write: (message: string) => logger.info(message.trim())\n  }\n}))\n\n// Health check endpoint\napp.get('/health', async (req, res) => {\n  try {\n    // Check database connection\n    await prisma.$queryRaw`SELECT 1`\n    \n    // Check Redis connection\n    await redis.ping()\n    \n    res.status(200).json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        database: 'connected',\n        cache: 'connected'\n      }\n    })\n  } catch (error) {\n    logger.error('Health check failed:', error)\n    res.status(503).json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: 'Service unavailable'\n    })\n  }\n})\n\n// API routes\napp.use('/api/auth', authRoutes)\napp.use('/api/ai', authMiddleware, aiRoutes)\napp.use('/api/user', authMiddleware, userRoutes)\napp.use('/api/document', authMiddleware, documentRoutes)\napp.use('/api/analytics', authMiddleware, analyticsRoutes)\n\n// API documentation\napp.get('/api', (req, res) => {\n  res.json({\n    name: 'AI Productivity Suite API',\n    version: '1.0.0',\n    description: 'Full-stack AI productivity suite with text generation, image creation, and document processing',\n    endpoints: {\n      auth: '/api/auth',\n      ai: '/api/ai',\n      user: '/api/user',\n      document: '/api/document',\n      analytics: '/api/analytics'\n    },\n    documentation: 'https://ai-suite-api.herokuapp.com/docs'\n  })\n})\n\n// Socket.io connection handling\nio.on('connection', (socket) => {\n  logger.info(`Client connected: ${socket.id}`)\n  \n  socket.on('join-room', (roomId: string) => {\n    socket.join(roomId)\n    logger.info(`Client ${socket.id} joined room ${roomId}`)\n  })\n  \n  socket.on('leave-room', (roomId: string) => {\n    socket.leave(roomId)\n    logger.info(`Client ${socket.id} left room ${roomId}`)\n  })\n  \n  socket.on('disconnect', () => {\n    logger.info(`Client disconnected: ${socket.id}`)\n  })\n})\n\n// Error handling middleware (must be last)\napp.use(errorHandler)\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Not Found',\n    message: 'The requested resource was not found on this server.',\n    path: req.originalUrl\n  })\n})\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down gracefully')\n  \n  server.close(() => {\n    logger.info('HTTP server closed')\n  })\n  \n  await prisma.$disconnect()\n  await redis.disconnect()\n  \n  process.exit(0)\n})\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down gracefully')\n  \n  server.close(() => {\n    logger.info('HTTP server closed')\n  })\n  \n  await prisma.$disconnect()\n  await redis.disconnect()\n  \n  process.exit(0)\n})\n\n// Start server\nconst PORT = process.env.PORT || 8000\nserver.listen(PORT, () => {\n  logger.info(`🚀 AI Productivity Suite API running on port ${PORT}`)\n  logger.info(`📚 API Documentation: http://localhost:${PORT}/api`)\n  logger.info(`🏥 Health Check: http://localhost:${PORT}/health`)\n})\n\n// Export for testing\nexport { app, server, prisma, redis, io }